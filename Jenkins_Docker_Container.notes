Ubuntu:
Jenkins Docker Container
-------------------------

$ apt-get update

Install certificates required to work with the Docker site. 
$ apt-get install apt-transport-https ca-certificates

Add new GPG key. Key required to ensure all data is encrypted when downloading
the necessary packages for Docker.
$ apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys  58118E89F3A912897C070ADBF76221572C52609D

Depending on version of Ubuntu , you will need to add the relevant site to the docker.list 
for the apt package manager, so that it will be able to detect the Docker packages from the 
Docker site and download them accordingly.

Precise 12.04 (LTS) - deb https://apt.dockerproject.org/repoubuntu-precise main
Trusty 14.04 (LTS) - deb https://apt.dockerproject.org/repo/ ubuntu-trusty main
Wily 15.10 - deb https://apt.dockerproject.org/repo ubuntu-wily main
Xenial 16.04 (LTS) - https://apt.dockerproject.org/repo ubuntu-xenial main

We're Using: Ubuntu 16.04 Xenial
so ....
$ echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main” | tee /etc/apt/sources.list.d/docker.list
$ apt-get update

Verify that the package manager is pointing to the right repository ...
$ apt-cache policy docker-engine

Install Docker ...
$ apt-get install –y docker-engine
$ docker version 
$ docker info

Pull Docker Image "jenkins"
$ docker pull jenkins

Now, we'll tag our image name with a short name to "jenkins-image"
$ docker tag jenkins jenkins-image

Run container using this image, map data directory from the container to the host. 
Here we map /var/lib/jenkins from the container to jenkins/ directory from the current path on the host. 
Jenkins port "8080" is also exposed to the host as "49001" ...

$ docker run -d -p 49001:8080 -v $PWD/jenkins:/var/lib/jenkins -t jenkins-image

AWS Security Group Setting ...
Custom TCP Rule   TCP 	49001 	0.0.0.0/0 
Custom TCP Rule   TCP   49001   ::/0 


Let's Try Connecting ...
$ http://<public_ip>:49001

Login to Container -- Get Inital Password
$ docker exec -it <container name or id> bash
$ cd /var/jenkins_home/secrets
$ cat initialAdminPassword
  Cut and paste password to browser

You know what to next ... 


UPGRADE DOCKER IMAGE ...

docker run --name jenkins-production \
           --detach \
           -p 50000:8080 \
           -v $PWD/jenkins:/var/lib/jenkins \
           jenkins/jenkins:2.73.3



--------------------------
RUNING DOCKER IN DOCKER
--------------------------
URL RES: https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci


MOUNT HOST'S MACHINES DOCKER SOCKET To CONTAINER
------------------------------------------------

docker run --name jenkinsserv001 -p 8080:8080 -p 50000:50000 -d -u root -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins

Login Container
$ docker exec -it -u root <image_name/ContID> /bin/bash


RUN PACKAGES NOW ...
---------------------------------------
apt-get update && \
apt-get -y install apt-transport-https \
     ca-certificates \
     curl \
     gnupg2 \
     software-properties-common && \
curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg > /tmp/dkey; apt-key add /tmp/dkey && \
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
   $(lsb_release -cs) \
   stable" && \
apt-get update && \
apt-get -y install docker-ce



NOW GET ADMIN PASSWORD
----------------------
$ docker exec <contName|jenkinsserv001> cat /var/jenkins_home/secrets/initialAdminPassword


IMPORTANT NOTE FOR DOCKER
Have to setup Credentials for "DockerHub"



-------------------------------------------------------------------------------------
Good Basic Docker info
http://engineering.hipolabs.com/understand-docker-without-losing-your-shit/
http://karlcode.owtelse.com/blog/2017/01/25/push-a-docker-image-to-personal-repository/


COMMIT CHANGES TO RUNNING CONTAINER:
$ docker commit <containID> <containNAME>        / Creates Updated Image --> $ docker images


LET'S PUSH UPDATED IMAGE:

$ docker login
<enter user name and password for Docker Hub Repository>

$ docker tag first-image {docker-hub-username}/{default-repo-folder-name}:first-image

$ docker push {docker-hub-username}/{default-repo-folder-name}:first-image

Example: 
docker tag jenkserv002 mrfoobar/hub-demo:jenkserv002
docker push mrfoobar/hub-demo:jenkserv002











