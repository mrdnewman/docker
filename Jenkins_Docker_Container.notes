Ubuntu:
HOST INSTALL JENKINS DOCKER CONTAINER
-------------------------------------

$ apt-get update

Install certificates required to work with the Docker site. 
$ apt-get install apt-transport-https ca-certificates

Add new GPG key. Key required to ensure all data is encrypted when downloading
the necessary packages for Docker.
$ apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys  58118E89F3A912897C070ADBF76221572C52609D

Depending on version of Ubuntu , you will need to add the relevant site to the docker.list 
for the apt package manager, so that it will be able to detect the Docker packages from the 
Docker site and download them accordingly.

Precise 12.04 (LTS) - deb https://apt.dockerproject.org/repoubuntu-precise main
Trusty 14.04 (LTS) - deb https://apt.dockerproject.org/repo/ ubuntu-trusty main
Wily 15.10 - deb https://apt.dockerproject.org/repo ubuntu-wily main
Xenial 16.04 (LTS) - https://apt.dockerproject.org/repo ubuntu-xenial main

We're Using: Ubuntu 16.04 Xenial
so ....
$ echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main” | tee /etc/apt/sources.list.d/docker.list
$ apt-get update

Verify that the package manager is pointing to the right repository ...
$ apt-cache policy docker-engine

Install Docker ...
$ apt-get install –y docker-engine
$ docker version 
$ docker info

Pull Docker Image "jenkins"
$ docker pull jenkins

Now, we'll tag our image name with a short name to "jenkins-image"
$ docker tag jenkins jenkins-image

This will mount a persistent volume "jenkins_home" on your host while mapping to container data directory
"/var/jenkins_home". Jenkin port 8080 is map host port 8080 likewise with port 50000.


OPTIONAL READ ...
--------------------------
RUNING DOCKER IN DOCKER
--------------------------
URL RES: https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci


<CONTINUE>
Here, we're allocating host ports to container, and attaching host docker.sock also to container.

$ docker run --name jenkinsserv002 -p 8080:8080 -p 50000:50000 -d -u root \
-v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins

NOTE: "-u root" is pertinent per access to "Host docker.sock" ...
NOTE: This is a setup only for running DOCKER in DOCKER, otherwise it's not useful to run container
      with /var/run/docker.sock persistence ... 

---------------------------------------
<NOTE>
AWS Security Group Setting ...
---------------------------------------
Custom TCP Rule   TCP 	8080 	0.0.0.0/0 
Custom TCP Rule   TCP   8080   ::/0 

Custom TCP Rule   TCP 	50000 	0.0.0.0/0 
Custom TCP Rule   TCP   50000   ::/0 

NOW GET ADMIN PASSWORD
----------------------
$ docker exec <contName> cat /var/jenkins_home/secrets/initialAdminPassword
OR
Login to Container -- Get Inital Password
$ docker exec -it <containName> bash
$ cd /var/jenkins_home/secrets
$ cat initialAdminPassword    // Cut and paste password to browser

You know what to do next ... 

<Optional>
==========================
UPGRADE DOCKER IMAGE ...
==========================
docker run --name jenkins-production \
           --detach \
           -p 50000:8080 \
           -v $PWD/jenkins:/var/lib/jenkins \
           jenkins/jenkins:2.73.3


Login Container
$ docker exec -it -u root <image_name/ContID> /bin/bash


RUN PACKAGES NOW ...
---------------------------------------
apt-get update 
apt-get -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common
curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg > /tmp/dkey; apt-key add /tmp/dkey && \
add-apt-repository \
"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
$(lsb_release -cs) \
stable" && apt-get update && apt-get -y install docker-ce

IMPORTANT NOTE FOR DOCKER
Have to setup Credentials for "DockerHub"


-------------------------------------------------------------------------------------

<Optional Read>
Docker info
http://engineering.hipolabs.com/understand-docker-without-losing-your-shit/
http://karlcode.owtelse.com/blog/2017/01/25/push-a-docker-image-to-personal-repository/


Let's Try Connecting ...
$ http://<public_ip>:8080


IF HAPPY ... COMMIT CHANGES TO RUNNING CONTAINER:
$ docker commit <containID> <containNAME>        / Creates Updated Image --> $ docker images


LET'S PUSH UPDATED IMAGE:

$ docker login
<enter user name and password for Docker Hub Repository>

$ docker tag first-image {docker-hub-username}/{default-repo-folder-name}:first-image

$ docker push {docker-hub-username}/{default-repo-folder-name}:first-image

Example: 
docker tag jenkserv002 mrfoobar/hub-demo:jenkserv002
docker push mrfoobar/hub-demo:jenkserv002

TEST PULLING IMAGE:
-------------------
docker pull mrfoobar/hub-demo:jenkserv002










